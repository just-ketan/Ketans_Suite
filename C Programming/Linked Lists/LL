typedef struct Node {
    int data;
    struct Node* next;
} Node;

Node* createNode(int data) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    if (newNode == NULL) {
        printf("Memory allocation failed!\n");
        exit(EXIT_FAILURE);
    }
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

--------------------------------------------------------------------------------
void traverseList(Node* head) {
    Node* current = head;
    printf("Linked List: ");
    while (current != NULL) {
        printf("%d -> ", current->data);
        current = current->next;
    }
    printf("NULL\n");
}



--------------------------------------------------------------------------------
4. Insertion Operations:
// Insert at beginning
Node* insertAtBeginning(Node* head, int data) {
    Node* newNode = createNode(data);
    newNode->next = head;
    return newNode; // New head
}

// Insert at end
Node* insertAtEnd(Node* head, int data) {
    Node* newNode = createNode(data);
    if (head == NULL) {
        return newNode; // New head
    }
    Node* current = head;
    while (current->next != NULL) {
        current = current->next;
    }
    current->next = newNode;
    return head;
}

// Insert at specific position (1-indexed)
Node* insertAtPosition(Node* head, int data, int position) {
    if (position < 1) {
        printf("Invalid position.\n");
        return head;
    }
    if (position == 1) {
        return insertAtBeginning(head, data);
    }

    Node* newNode = createNode(data);
    Node* current = head;
    for (int i = 1; current != NULL && i < position - 1; i++) {
        current = current->next;
    }
    if (current == NULL) { // Position out of bounds
        printf("Position out of bounds.\n");
        free(newNode);
        return head;
    }
    newNode->next = current->next;
    current->next = newNode;
    return head;
}



--------------------------------------------------------------------------------

5. Deletion Operations:
// Delete first node
Node* deleteFirstNode(Node* head) {
    if (head == NULL) {
        printf("List is empty.\n");
        return NULL;
    }
    Node* temp = head;
    head = head->next;
    free(temp);
    return head;
}

// Delete last node
Node* deleteLastNode(Node* head) {
    if (head == NULL) {
        printf("List is empty.\n");
        return NULL;
    }
    if (head->next == NULL) { // Only one node
        free(head);
        return NULL;
    }
    Node* current = head;
    while (current->next->next != NULL) {
        current = current->next;
    }
    free(current->next);
    current->next = NULL;
    return head;
}

// Delete node by value
Node* deleteNodeByValue(Node* head, int value) {
    if (head == NULL) return NULL;

    if (head->data == value) {
        Node* temp = head;
        head = head->next;
        free(temp);
        return head;
    }

    Node* current = head;
    while (current->next != NULL && current->next->data != value) {
        current = current->next;
    }
    if (current->next == NULL) { // Value not found
        printf("Value %d not found in list.\n", value);
        return head;
    }
    Node* temp = current->next;
    current->next = temp->next;
    free(temp);
    return head;
}



--------------------------------------------------------------------------------

6. Reverse a Linked List (Iterative):
Node* reverseList(Node* head) {
    Node* prev = NULL;
    Node* current = head;
    Node* next = NULL;
    while (current != NULL) {
        next = current->next; // Store next node
        current->next = prev; // Reverse current node's pointer
        prev = current;       // Move pointers one position ahead
        current = next;
    }
    return prev; // New head (original tail)
}



--------------------------------------------------------------------------------

7. Detect Loop in a Linked List (Floyd's Cycle-Finding Algorithm):
bool detectLoop(Node* head) {
    if (head == NULL || head->next == NULL) {
        return false;
    }
    Node* slow = head;
    Node* fast = head->next; // Start fast one step ahead

    while (fast != NULL && fast->next != NULL) {
        if (slow == fast) {
            return true; // Loop detected
        }
        slow = slow->next;
        fast = fast->next->next;
    }
    return false; // No loop
}



--------------------------------------------------------------------------------

8. Find the Middle Element:
int findMiddleElement(Node* head) {
    if (head == NULL) {
        printf("List is empty.\n");
        return -1; // Or throw error
    }
    Node* slow = head;
    Node* fast = head;
    while (fast != NULL && fast->next != NULL) {
        slow = slow->next;
        fast = fast->next->next;
    }
    return slow->data;
}



--------------------------------------------------------------------------------

9. Merge Two Sorted Linked Lists:
Node* mergeTwoSortedLists(Node* l1, Node* l2) {
    if (l1 == NULL) return l2;
    if (l2 == NULL) return l1;

    Node* result = NULL;
    if (l1->data <= l2->data) {
        result = l1;
        l1 = l1->next;
    } else {
        result = l2;
        l2 = l2->next;
    }
    Node* current = result;

    while (l1 != NULL && l2 != NULL) {
        if (l1->data <= l2->data) {
            current->next = l1;
            l1 = l1->next;
        } else {
            current->next = l2;
            l2 = l2->next;
        }
        current = current->next;
    }

    if (l1 != NULL) {
        current->next = l1;
    }
    if (l2 != NULL) {
        current->next = l2;
    }
    return result;
}



--------------------------------------------------------------------------------

10. Nth Node from End:
int findNthFromEnd(Node* head, int n) {
    if (head == NULL) {
        printf("List is empty.\n");
        return -1;
    }
    Node* main_ptr = head;
    Node* ref_ptr = head;
    int count = 0;

    // Move ref_ptr n nodes ahead
    while (count < n) {
        if (ref_ptr == NULL) {
            printf("N is greater than the number of nodes in list.\n");
            return -1;
        }
        ref_ptr = ref_ptr->next;
        count++;
    }

    // Move both pointers until ref_ptr reaches the end
    while (ref_ptr != NULL) {
        main_ptr = main_ptr->next;
        ref_ptr = ref_ptr->next;
    }

    return main_ptr->data;
}
